name: Build Container for develop

on:
  push:
    paths:
      - "Dockerfile"
      - "root/**"
      - ".github/workflows/build.yml"
    branches:
      - develop
  workflow_dispatch:
    inputs:
      conreq_version:
        description: "Commit to build"
        required: true

jobs:
  updates:
    name: Check latest version
    runs-on: ubuntu-latest
    outputs:
      commit: ${{ steps.vars.outputs.commit }}
    steps:
      - name: Create VARS
        id: vars
        run: |
          if [ -z "$GITHUB_EVENT_INPUTS_CONREQ_VERSION" ]; then
            export CONREQ_VERSION=$(curl -sX GET https://api.github.com/repos/archmonger/conreq/commits/develop | jq -r '. | .sha' | cut -c1-8)
            export DOCKER_TAGS=$(curl -s "https://registry.hub.docker.com/api/content/v1/repositories/public/roxedus/conreq/tags?page_size=1000")
            if echo "${DOCKER_TAGS}" | grep -q "\"develop-${CONREQ_VERSION}\""; then
              echo "latest version ${CONREQ_VERSION} already built"
              echo "::set-output name=commit::no"
            else
              echo "::set-output name=commit::${CONREQ_VERSION}"
              echo "Commit manually built"
            fi
          else
            echo "::set-output name=commit::${GITHUB_EVENT_INPUTS_CONREQ_VERSION}"
            echo "Commit automatically built"
          fi

  checks:
    name: Shellcheck
    runs-on: ubuntu-latest
    if: "needs.updates.outputs.commit != 'no'"
    needs: [updates]
    steps:
      - uses: actions/checkout@v2
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
          dockerfile: "Dockerfile"

  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-20.04
    needs: [checks, updates]

    strategy:
      matrix:
        architecture: [linux-arm-v7, linux-arm64, linux-amd64]

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare
        id: prep
        env:
          conreq_commit: ${{ needs.updates.outputs.commit }}
        run: |
          ARCHITECTURE=${{ matrix.architecture }}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=title::${GITHUB_REPOSITORY//docker-/}:${GITHUB_REF//refs\/heads\//}
          echo ::set-output name=revision::${conreq_commit}
          echo ::set-output name=source::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/${GITHUB_REF//refs\/heads\//}
          echo ::set-output name=vendor::${{ github.repository_owner }}
          echo ::set-output name=url::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/master/README.md
          echo ::set-output name=platform::${ARCHITECTURE//-/\/}
          echo ::set-output name=cache::"$(echo ${GITHUB_REPOSITORY//docker-/}:${GITHUB_REF//refs\/heads\//}-cache-${{ matrix.architecture }} | tr '[:upper:]' '[:lower:]')"
          echo ::set-output name=tag::"$(echo ${GITHUB_REPOSITORY//docker-/}:${GITHUB_REF//refs\/heads\//}-${conreq_commit:0:8}-${GITHUB_RUN_NUMBER}-${{ matrix.architecture }} | tr '[:upper:]' '[:lower:]')"
          echo ::set-output name=version::${{ needs.updates.outputs.commit }}
          if [[ ! ${{ needs.updates.outputs.commit }} == "no" ]]; then
            echo ::set-output name=build-args::CONREQ_VERSION=${{ needs.updates.outputs.commit }}
          fi

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./Dockerfile
          #cache-from: ${{ steps.prep.outputs.cache }}
          #cache-to: ${{ steps.prep.outputs.cache }}
          tags: |
            ${{ steps.prep.outputs.tag }}
            ghcr.io/${{ steps.prep.outputs.tag }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.title=${{ steps.prep.outputs.title }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.revision }}
            org.opencontainers.image.source=${{ steps.prep.outputs.source }}
            org.opencontainers.image.vendor=${{ steps.prep.outputs.vendor }}
            org.opencontainers.image.url=${{ steps.prep.outputs.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          build-args: ${{ steps.prep.outputs.build-args }}

      - name: Dive Analysis
        uses: yuichielectric/dive-action@0.0.4
        with:
          image: "${{ steps.prep.outputs.tag }}"

  publish:
    runs-on: ubuntu-20.04
    needs: [build, updates]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifests for DockerHub
        env:
          conreq_commit: ${{ needs.updates.outputs.commit }}
        run: |
          IMAGE="$(echo ${GITHUB_REPOSITORY//docker-/} | tr '[:upper:]' '[:lower:]')"
          TAG=${GITHUB_REF//refs\/heads\//}
          SOURCE=${IMAGE}:${TAG}-${conreq_commit:0:8}-${GITHUB_RUN_NUMBER}
          docker manifest create ${IMAGE}:${TAG}                                            --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}
          docker manifest create ${IMAGE}:${TAG}-${conreq_commit:0:8}                          --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}-${conreq_commit:0:8}
          docker manifest create ${IMAGE}:conreq-${{ needs.updates.outputs.commit }}        --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:conreq-${{ needs.updates.outputs.commit }}

      - name: Create manifests for GitHub Container Registry
        env:
          conreq_commit: ${{ needs.updates.outputs.commit }}
        run: |
          IMAGE="ghcr.io/$(echo ${GITHUB_REPOSITORY//docker-/} | tr '[:upper:]' '[:lower:]')"
          TAG=${GITHUB_REF//refs\/heads\//}
          SOURCE=${IMAGE}:${TAG}-${conreq_commit:0:8}-${GITHUB_RUN_NUMBER}
          docker manifest create ${IMAGE}:${TAG}                                            --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}
          docker manifest create ${IMAGE}:${TAG}-${conreq_commit:0:8}                          --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}-${conreq_commit:0:8}
          docker manifest create ${IMAGE}:conreq-${{ needs.updates.outputs.commit }}        --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:conreq-${{ needs.updates.outputs.commit }}
